{"version":3,"sources":["../../../spec/datasource_spec.js"],"names":["describe","ctx","hProtocol","hHostname","hPort","hPath","instanceSettings","url","jsonData","tenant","parsePathElements","request","expect","method","to","equal","headers","have","property","parser","document","createElement","href","pathname","split","filter","e","length","beforeEach","$q","backendSrv","datasourceRequest","when","data","templateSrv","replace","target","vars","ds","it","done","query","targets","then","result","with","err","options","range","from","type","rate","queryBy","pathElements","id","slice","deep","be","oneOf","start","end","ids","order","status","timestamp","value","map","t","include","members","datapoints","string","tags","name","seriesAggFn","timeAggFn","buckets","stacked","min","max","avg","limit","annotation","annotationQuery","time","title","undefined","text"],"mappings":"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","file":"datasource_spec.js","sourcesContent":["import {Datasource} from \"../module\";\nimport Q from \"q\";\n\ndescribe('HawkularDatasource', function () {\n  var ctx = {};\n  var hProtocol = 'https';\n  var hHostname = 'test.com';\n  var hPort = '876';\n  var hPath = 'hawkular/metrics';\n  var instanceSettings = {\n    url: hProtocol + '://' + hHostname + ':' + hPort + '/' + hPath,\n    jsonData: {\n      tenant: 'test-tenant'\n    }\n  };\n\n  var parsePathElements = function(request) {\n    expect(request.method).to.equal('POST');\n    expect(request.headers).to.have.property('Hawkular-Tenant', instanceSettings.jsonData.tenant);\n\n    var parser = document.createElement('a');\n    parser.href = request.url;\n\n    expect(parser).to.have.property('protocol', hProtocol + ':');\n    expect(parser).to.have.property('hostname', hHostname);\n    expect(parser).to.have.property('port', hPort);\n    expect(parser).to.have.property('pathname');\n\n    return parser.pathname.split('/').filter(e => e.length != 0);\n  }\n\n  beforeEach(function () {\n    ctx.$q = Q;\n    ctx.backendSrv = {};\n    ctx.backendSrv.datasourceRequest = function (request) {\n      return ctx.$q.when({data: {'Implementation-Version': '1.0.0'}})\n    };\n    ctx.templateSrv = {\n        replace: function(target, vars) {\n          return target;\n        }\n    };\n    ctx.ds = new Datasource(instanceSettings, ctx.$q, ctx.backendSrv, ctx.templateSrv);\n  });\n\n  it('should return an empty array when no targets are set', function (done) {\n    ctx.ds.query({targets: []}).then(function (result) {\n      expect(result).to.have.property('data').with.length(0);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return the server results when a target is set', function (done) {\n\n    var options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        target: 'memory',\n        type: 'gauge',\n        rate: false,\n        queryBy: 'ids'\n      }, {\n        target: 'packets',\n        type: 'counter',\n        rate: true,\n        queryBy: 'ids'\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = function (request) {\n      let pathElements = parsePathElements(request);\n      var id = pathElements[2] == 'gauges' ? 'memory' : 'packets';\n\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements[2]).to.be.oneOf(['gauges', 'counters']);\n      if (pathElements[2] == 'gauges') {\n        expect(pathElements.slice(3)).to.deep.equal(['raw', 'query']);\n        expect(request.data).to.deep.equal({\n          start: options.range.from,\n          end: options.range.to,\n          ids: [id],\n          order: 'ASC'\n        });\n      } else {\n        expect(pathElements.slice(3)).to.deep.equal(['rate', 'query']);\n        expect(request.data).to.deep.equal({\n          start: options.range.from,\n          end: options.range.to,\n          ids: [id],\n          order: 'ASC'\n        });\n      }\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: id,\n          data: [{\n            timestamp: 13,\n            value: 15\n          }, {\n            timestamp: 19,\n            value: 21\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(function (result) {\n      expect(result.data).to.have.length(2);\n      expect(result.data.map(t => t.target)).to.include.members(['memory', 'packets']);\n      expect(result.data[0].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n      expect(result.data[1].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return multiple results with templated target', function (done) {\n\n    let options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        target: '$app/memory',\n        type: 'gauge',\n        rate: false,\n        queryBy: 'ids'\n      }]\n    };\n\n    ctx.templateSrv.replace = function(target, vars) {\n      expect(target).to.equal('$app');\n      return \"{app_1,app_2}\";\n    };\n\n    ctx.backendSrv.datasourceRequest = function(request) {\n      expect(request.url).to.have.string(\"/gauges/raw/query\");\n      expect(request.data.ids).to.include.members(['app_1/memory', 'app_2/memory']);\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"app_1/memory\",\n          data: [{\n            timestamp: 13,\n            value: 15\n          }, {\n            timestamp: 19,\n            value: 21\n          }]\n        },{\n          id: \"app_2/memory\",\n          data: [{\n            timestamp: 13,\n            value: 28\n          }, {\n            timestamp: 19,\n            value: 32\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(function (result) {\n      expect(result.data).to.have.length(2);\n      expect(result.data.map(t => t.target)).to.include.members(['app_1/memory', 'app_2/memory']);\n      expect(result.data[0].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n      expect(result.data[1].datapoints).to.deep.equal([[28, 13], [32, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query by tags', function (done) {\n\n    var options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        tags: [\n          {name: 'type', value: 'memory'},\n          {name: 'host', value: 'myhost'}\n        ],\n        type: 'gauge',\n        rate: false,\n        queryBy: 'tags'\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = function (request) {\n      let pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'raw', 'query']);\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: \"type:memory,host:myhost\",\n        order: 'ASC'\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"myhost.metric.memory.1\",\n          data: [{\n            timestamp: 13,\n            value: 15\n          }, {\n            timestamp: 19,\n            value: 21\n          }]\n        },{\n          id: \"myhost.metric.memory.2\",\n          data: [{\n            timestamp: 13,\n            value: 20\n          }, {\n            timestamp: 19,\n            value: 25\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(function (result) {\n      expect(result.data).to.have.length(2);\n      expect(result.data.map(t => t.target)).to.include.members(['myhost.metric.memory.1', 'myhost.metric.memory.2']);\n      expect(result.data[0].datapoints).to.deep.equal([[15, 13], [21, 19]]);\n      expect(result.data[1].datapoints).to.deep.equal([[20, 13], [25, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return aggregated stats max/stacked', function (done) {\n\n    var options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'sum',\n        timeAggFn: 'max',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false,\n        queryBy: 'tags'\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = function (request) {\n      let pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'stats', 'query']);\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: \"type:memory\",\n        buckets: 1,\n        stacked: true\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          start: 13,\n          end: 19,\n          min: 35,\n          max: 46,\n          avg: 40.5\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(function (result) {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[46, 13]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return aggregated stats avg/not stacked', function (done) {\n\n    var options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'avg',\n        timeAggFn: 'avg',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false,\n        queryBy: 'tags'\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = function (request) {\n      let pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'stats', 'query']);\n      expect(request.data).to.deep.equal({\n        start: options.range.from,\n        end: options.range.to,\n        tags: \"type:memory\",\n        buckets: 1,\n        stacked: false\n      });\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          start: 13,\n          end: 19,\n          min: 15,\n          max: 25,\n          avg: 20.25\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(function (result) {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[20.25, 13]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return live stats stacked', function (done) {\n\n    var options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'sum',\n        timeAggFn: 'live',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false,\n        queryBy: 'tags'\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = function (request) {\n      let pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'raw', 'query']);\n      expect(request.data.limit).to.equal(1);\n      expect(request.data.tags).to.equal(\"type:memory\");\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"myhost.metric.memory.1\",\n          data: [{\n            timestamp: 18,\n            value: 21\n          }]\n        },{\n          id: \"myhost.metric.memory.2\",\n          data: [{\n            timestamp: 19,\n            value: 25\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(function (result) {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[46, 18]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should return live stats not stacked', function (done) {\n\n    var options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        seriesAggFn: 'avg',\n        timeAggFn: 'live',\n        tags: [{name: 'type', value: 'memory'}],\n        type: 'gauge',\n        rate: false,\n        queryBy: 'tags'\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = function (request) {\n      let pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['gauges', 'raw', 'query']);\n      expect(request.data.limit).to.equal(1);\n      expect(request.data.tags).to.equal(\"type:memory\");\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"myhost.metric.memory.1\",\n          data: [{\n            timestamp: 18,\n            value: 21\n          }]\n        },{\n          id: \"myhost.metric.memory.2\",\n          data: [{\n            timestamp: 19,\n            value: 25\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(function (result) {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].datapoints).to.deep.equal([[23, 18]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query availability', function (done) {\n\n    var options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      targets: [{\n        target: 'myapp/health',\n        type: 'availability',\n        queryBy: 'ids'\n      }]\n    };\n\n    ctx.backendSrv.datasourceRequest = function (request) {\n      let pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['availability', 'raw', 'query']);\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"myapp/health\",\n          data: [{\n            timestamp: 13,\n            value: 'up'\n          }, {\n            timestamp: 19,\n            value: 'down'\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.query(options).then(function (result) {\n      expect(result.data).to.have.length(1);\n      expect(result.data[0].target).to.equal('myapp/health');\n      expect(result.data[0].datapoints).to.deep.equal([[1, 13], [0, 19]]);\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query annotations without tags', function(done) {\n\n    var options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      annotation: {\n        query: \"my.timeline\",\n        name: \"Timeline\"\n      }\n    };\n\n    ctx.backendSrv.datasourceRequest = function(request) {\n      let pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['strings', 'raw', 'query']);\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"my.timeline\",\n          data: [{\n            timestamp: 13,\n            value: 'start'\n          }, {\n            timestamp: 19,\n            value: 'stop'\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.annotationQuery(options).then(function(result) {\n      expect(result).to.have.length(2);\n      expect(result[0].annotation).to.deep.equal({ query: \"my.timeline\", name: \"Timeline\" });\n      expect(result[0].time).to.equal(13);\n      expect(result[0].title).to.equal(\"Timeline\");\n      expect(result[0].tags).to.be.undefined;\n      expect(result[0].text).to.equal(\"start\");\n\n      expect(result[1].annotation).to.deep.equal({ query: \"my.timeline\", name: \"Timeline\" });\n      expect(result[1].time).to.equal(19);\n      expect(result[1].title).to.equal(\"Timeline\");\n      expect(result[1].tags).to.be.undefined;\n      expect(result[1].text).to.equal(\"stop\");\n    }).then(v => done(), err => done(err));\n  });\n\n  it('should query annotations with tags', function(done) {\n\n    var options = {\n      range: {\n        from: 15,\n        to: 30\n      },\n      annotation: {\n        query: \"my.timeline\",\n        name: \"Timeline\"\n      }\n    };\n\n    ctx.backendSrv.datasourceRequest = function(request) {\n      let pathElements = parsePathElements(request);\n      expect(pathElements).to.have.length(5);\n      expect(pathElements.slice(0, 2)).to.deep.equal(hPath.split('/'));\n      expect(pathElements.slice(2)).to.deep.equal(['strings', 'raw', 'query']);\n\n      return ctx.$q.when({\n        status: 200,\n        data: [{\n          id: \"my.timeline\",\n          data: [{\n            timestamp: 13,\n            value: 'start',\n            tags: {\n              'item': 'myItem',\n              'step': 'start'\n            }\n          }, {\n            timestamp: 19,\n            value: 'stop',\n            tags: {\n              'item': 'myItem',\n              'step': 'stop'\n            }\n          }]\n        }]\n      });\n    };\n\n    ctx.ds.annotationQuery(options).then(function(result) {\n      expect(result).to.have.length(2);\n      expect(result[0].annotation).to.deep.equal({ query: \"my.timeline\", name: \"Timeline\" });\n      expect(result[0].time).to.equal(13);\n      expect(result[0].title).to.equal(\"Timeline\");\n      expect(result[0].tags).to.equal(\"myItem start\");\n      expect(result[0].text).to.equal(\"start\");\n\n      expect(result[1].annotation).to.deep.equal({ query: \"my.timeline\", name: \"Timeline\" });\n      expect(result[1].time).to.equal(19);\n      expect(result[1].title).to.equal(\"Timeline\");\n      expect(result[1].tags).to.equal(\"myItem stop\");\n      expect(result[1].text).to.equal(\"stop\");\n    }).then(v => done(), err => done(err));\n  });\n});\n"]}