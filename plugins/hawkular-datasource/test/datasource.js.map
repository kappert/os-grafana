{"version":3,"sources":["../../src/datasource.js"],"names":["HawkularDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","headers","jsonData","tenant","basicAuth","length","token","typeResources","variables","capabilitiesPromise","queryVersion","then","version","queryProcessor","options","validTargets","targets","filter","target","hide","queryBy","tags","when","data","promises","map","run","all","flatten","concat","apply","responses","sort","m1","m2","localeCompare","datasourceRequest","method","response","status","message","title","start","range","from","valueOf","end","to","order","ids","annotation","query","annot","time","dp","timestamp","undefined","text","value","key","hasOwnProperty","push","replace","join","result","m","id","params","substr","findTags","trim","charAt","metric","pattern","flatTags","property","tag","catch"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport {Variables} from './variables';\nimport {Capabilities} from './capabilities';\nimport {QueryProcessor} from './queryProcessor';\n\nexport class HawkularDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.headers = {\n      'Content-Type': 'application/json',\n      'Hawkular-Tenant': instanceSettings.jsonData.tenant\n    };\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    } else if (typeof instanceSettings.jsonData.token === 'string' && instanceSettings.jsonData.token.length > 0) {\n      this.headers['Authorization'] = 'Bearer ' + instanceSettings.jsonData.token;\n    }\n    this.typeResources = {\n      \"gauge\": \"gauges\",\n      \"counter\": \"counters\",\n      \"availability\": \"availability\"\n    };\n    let variables = new Variables(templateSrv);\n    this.capabilitiesPromise = this.queryVersion()\n      .then(version => new Capabilities(version));\n    this.queryProcessor = new QueryProcessor($q, backendSrv, variables, this.capabilitiesPromise, this.url, this.headers, this.typeResources);\n  }\n\n  query(options) {\n    let validTargets = options.targets\n      .filter(target => !target.hide)\n      .filter(target => (target.queryBy === 'tags' && target.tags.length > 0) || target.target !== 'select metric');\n\n    if (validTargets.length === 0) {\n      return this.q.when({data: []});\n    }\n\n    let promises = validTargets.map(target => {\n      return this.queryProcessor.run(target, options);\n    });\n\n    return this.q.all(promises).then(responses => {\n      let flatten = [].concat.apply([], responses)\n        .sort(function(m1, m2) {\n          return m1.target.localeCompare(m2.target);\n        });\n      return {data: flatten};\n    });\n  }\n\n  testDatasource() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics',\n      method: 'GET',\n      headers: this.headers\n    }).then(response => {\n      if (response.status === 200 || response.status === 204) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      } else {\n        return { status: \"error\", message: \"Connection failed (\" + response.status + \")\", title: \"Error\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/strings/raw/query',\n      data: {\n        start: options.range.from.valueOf(),\n        end: options.range.to.valueOf(),\n        order: 'ASC',\n        ids: [options.annotation.query]\n      },\n      method: 'POST',\n      headers: this.headers\n    }).then(response => response.status == 200 ? response.data[0].data : [])\n    .then(data => data.map(dp => {\n      var annot = {\n        annotation: options.annotation,\n        time: dp.timestamp,\n        title: options.annotation.name,\n        tags: undefined,\n        text: dp.value\n      };\n      if (dp.tags) {\n        var tags = [];\n        for (var key in dp.tags) {\n          if (dp.tags.hasOwnProperty(key)) {\n            tags.push(dp.tags[key].replace(' ', '_'));\n          }\n        }\n        if (tags.length > 0) {\n          annot.tags = tags.join(' ');\n        }\n      }\n      return annot;\n    }));\n  }\n\n  suggestQueries(target) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics?type=' + target.type,\n      method: 'GET',\n      headers: this.headers\n    }).then(result => {\n      return result.data.map(m => m.id)\n        .sort()\n        .map(id => {\n          return {text: id, value: id};\n        });\n    });\n  }\n\n  suggestTags(type, key) {\n    if (!key) {\n      // Need at least some characters typed in order to suggest something\n      return this.q.when([]);\n    }\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/' + this.typeResources[type] + '/tags/' + key + ':*',\n      method: 'GET',\n      headers: this.headers\n    }).then(result => {\n      if (result.data.hasOwnProperty(key)) {\n        return [' *'].concat(result.data[key]).map(value => {\n          return {text: value, value: value};\n        });\n      }\n      return [];\n    });\n  }\n\n  metricFindQuery(query) {\n    var params = \"\";\n    if (query !== undefined) {\n      if (query.substr(0, 5) === \"tags/\") {\n        return this.findTags(query.substr(5).trim());\n      }\n      if (query.charAt(0) === '?') {\n        params = query;\n      } else {\n        params = \"?\" + query;\n      }\n    }\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics' + params,\n      method: 'GET',\n      headers: this.headers\n    }).then(result => {\n      return _.map(result.data, metric => {\n        return {text: metric.id, value: metric.id};\n      });\n    });\n  }\n\n  findTags(pattern) {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/metrics/tags/' + pattern,\n      method: 'GET',\n      headers: this.headers\n    }).then(result => {\n      var flatTags = [];\n      if (result.data) {\n        var data = result.data;\n        for (var property in data) {\n          if (data.hasOwnProperty(property)) {\n            flatTags = flatTags.concat(data[property]);\n          }\n        }\n      }\n      return flatTags.map(tag => {\n        return {text: tag, value: tag};\n      });\n    });\n  }\n\n  queryVersion() {\n    return this.backendSrv.datasourceRequest({\n      url: this.url + '/status',\n      method: 'GET',\n      headers: {'Content-Type': 'application/json'}\n    }).then(response => response.data['Implementation-Version'])\n    .catch(response => \"Unknown\");\n  }\n\n  getCapabilities() {\n    return this.capabilitiesPromise;\n  }\n}\n"]}