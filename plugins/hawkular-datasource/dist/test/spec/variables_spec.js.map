{"version":3,"sources":["../../../spec/variables_spec.js"],"names":["describe","ctx","templateSrv","variables","beforeEach","replace","target","vars","it","done","expect","to","equal","resolved","resolve","deep"],"mappings":";;AAAA;;AACA;;;;;;AAEAA,SAAS,WAAT,EAAsB,YAAY;AAChC,MAAIC,MAAM;AACRC,iBAAa,EADL;AAERC,eAAW;AAFH,GAAV;;AAKAC,aAAW,YAAY;AACrBH,QAAIC,WAAJ,GAAkB;AACdG,eAAS,iBAASC,MAAT,EAAiBC,IAAjB,EAAuB;AAC9B,eAAOD,MAAP;AACD;AAHa,KAAlB;AAKAL,QAAIE,SAAJ,GAAgB,yBAAcF,IAAIC,WAAlB,CAAhB;AACD,GAPD;;AASAM,KAAG,gCAAH,EAAqC,UAAUC,IAAV,EAAgB;AACnDR,QAAIC,WAAJ,CAAgBG,OAAhB,GAA0B,UAASC,MAAT,EAAiBC,IAAjB,EAAuB;AAC/CG,aAAOJ,MAAP,EAAeK,EAAf,CAAkBC,KAAlB,CAAwB,MAAxB;AACA,aAAO,eAAP;AACD,KAHD;AAIA,QAAIC,WAAWZ,IAAIE,SAAJ,CAAcW,OAAd,CAAsB,mBAAtB,EAA2C,EAA3C,CAAf;AACAJ,WAAOG,QAAP,EAAiBF,EAAjB,CAAoBI,IAApB,CAAyBH,KAAzB,CAA+B,CAAC,oBAAD,EAAuB,oBAAvB,CAA/B;AACAH;AACD,GARD;;AAUAD,KAAG,mCAAH,EAAwC,UAAUC,IAAV,EAAgB;AACtDR,QAAIC,WAAJ,CAAgBG,OAAhB,GAA0B,UAASC,MAAT,EAAiBC,IAAjB,EAAuB;AAC/C,UAAID,WAAW,MAAf,EAAuB;AACrB,eAAO,eAAP;AACD;AACD,UAAIA,WAAW,YAAf,EAA6B;AAC3B,eAAO,gBAAP;AACD;AACD,aAAOA,MAAP;AACD,KARD;AASA,QAAIO,WAAWZ,IAAIE,SAAJ,CAAcW,OAAd,CAAsB,8BAAtB,EAAsD,EAAtD,CAAf;AACAJ,WAAOG,QAAP,EAAiBF,EAAjB,CAAoBI,IAApB,CAAyBH,KAAzB,CAA+B,CAC7B,yBAD6B,EAE7B,yBAF6B,EAG7B,yBAH6B,EAI7B,yBAJ6B,EAK7B,uBAL6B,EAM7B,uBAN6B,CAA/B;AAQAH;AACD,GApBD;AAqBD,CA9CD","file":"variables_spec.js","sourcesContent":["import {Variables} from \"../variables\";\nimport Q from \"q\";\n\ndescribe('Variables', function () {\n  let ctx = {\n    templateSrv: {},\n    variables: {}\n  };\n\n  beforeEach(function () {\n    ctx.templateSrv = {\n        replace: function(target, vars) {\n          return target;\n        }\n    };\n    ctx.variables = new Variables(ctx.templateSrv);\n  });\n\n  it('should resolve single variable', function (done) {\n    ctx.templateSrv.replace = function(target, vars) {\n      expect(target).to.equal('$app');\n      return \"{app_1,app_2}\";\n    };\n    let resolved = ctx.variables.resolve(\"$app/memory/usage\", {});\n    expect(resolved).to.deep.equal(['app_1/memory/usage', 'app_2/memory/usage']);\n    done();\n  });\n\n  it('should resolve multiple variables', function (done) {\n    ctx.templateSrv.replace = function(target, vars) {\n      if (target === '$app') {\n        return \"{app_1,app_2}\";\n      }\n      if (target === '$container') {\n        return \"{1234,5678,90}\";\n      }\n      return target;\n    };\n    let resolved = ctx.variables.resolve(\"$app/$container/memory/usage\", {});\n    expect(resolved).to.deep.equal([\n      'app_1/1234/memory/usage',\n      'app_2/1234/memory/usage',\n      'app_1/5678/memory/usage',\n      'app_2/5678/memory/usage',\n      'app_1/90/memory/usage',\n      'app_2/90/memory/usage'\n    ]);\n    done();\n  });\n});\n"]}